
WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS),
LatestJobRun AS (
    SELECT 
        h.job_id, 
        h.step_id, 
        MAX(h.run_date) AS LastRunDate
    FROM msdb.dbo.sysjobhistory h
    GROUP BY h.job_id, h.step_id
)
SELECT 
    sj.name AS JobName,
    sjs.step_name AS JobStep,
    ljr.LastRunDate,
    CASE h.run_status
        WHEN 0 THEN 'Failed'
        WHEN 1 THEN 'Succeeded'
        WHEN 2 THEN 'Retry'
        WHEN 3 THEN 'Canceled'
        WHEN 4 THEN 'In Progress'
    END AS JobStatus,
    p.name AS PackageName, 
    f.foldername AS FolderPath, 
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName, 
    x.PackageXML.value('(//DTS:Property[@DTS:Name="CreationName"])[1]', 'nvarchar(255)') AS CreationName, 
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString, 
    x.PackageXML.value('(//DTS:Property[@DTS:Name="Description"])[1]', 'nvarchar(max)') AS Description
FROM msdb.dbo.sysjobs sj
JOIN msdb.dbo.sysjobsteps sjs ON sj.job_id = sjs.job_id
JOIN LatestJobRun ljr ON sj.job_id = ljr.job_id AND sjs.step_id = ljr.step_id
JOIN msdb.dbo.sysjobhistory h ON ljr.job_id = h.job_id 
    AND ljr.step_id = h.step_id 
    AND ljr.LastRunDate = h.run_date
JOIN msdb.dbo.sysssispackages p ON CHARINDEX(p.name, sjs.command) > 0
JOIN msdb.dbo.sysdtspackagefolders f ON p.folderid = f.folderid
CROSS APPLY (SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))) x (PackageXML)
WHERE 
    sjs.subsystem = 'SSIS' 
    AND x.PackageXML.exist('//DTS:ConnectionManager') = 1
ORDER BY 
    ljr.LastRunDate DESC, 
    f.foldername, 
    p.name;

#################################################################################
search every connection manager

WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS)
SELECT 
    p.name AS PackageName,
    f.foldername AS FolderPath,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="CreationName"])[1]', 'nvarchar(255)') AS CreationName,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="Description"])[1]', 'nvarchar(max)') AS Description
FROM msdb.dbo.sysssispackages p
JOIN msdb.dbo.sysdtspackagefolders f 
    ON p.folderid = f.folderid
CROSS APPLY (
    SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))
) x (PackageXML)
WHERE x.PackageXML.exist('//DTS:ConnectionManager') = 1
ORDER BY 
    f.foldername,
    p.name;









WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS)
SELECT 
    p.name AS PackageName,
    f.foldername AS FolderPath,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString
FROM msdb.dbo.sysssispackages p
JOIN msdb.dbo.sysdtspackagefolders f 
    ON p.folderid = f.folderid
CROSS APPLY (SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))) x (PackageXML)
WHERE x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1
   OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.ACE")]') = 1
   OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.Jet")]') = 1;
############################################################################################################################

WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS)

SELECTÂ 

Â  Â  p.name AS PackageName,Â 

Â  Â  f.foldername AS FolderPath,Â 

Â  Â  x.PackageXML.value('(/DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName,Â 

Â  Â  x.PackageXML.value('(/DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString

FROM msdb.dbo.sysssispackages p

JOIN msdb.dbo.sysssispackagefolders f ON p.folderid = f.folderid

CROSS APPLY (SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))) x (PackageXML)

WHEREÂ 

Â  Â  x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1

Â  Â  AND x.PackageXML.value('(/DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') LIKE '%Excel%'

ORDER BY p.name;

####################################################################################################################################

WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS)
SELECT 
    p.name AS PackageName,
    f.foldername AS FolderPath,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="CreationName"])[1]', 'nvarchar(255)') AS CreationName
FROM msdb.dbo.sysssispackages p
JOIN msdb.dbo.sysdtspackagefolders f 
    ON p.folderid = f.folderid
CROSS APPLY (SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))) x (PackageXML)
WHERE 
    -- Check CreationName for Excel specifically
    x.PackageXML.exist('//DTS:Property[@DTS:Name="CreationName"][contains(., "Excel")]') = 1
    OR
    -- Check for Excel file extensions in connection string
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".xls")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".xlsx")]') = 1
    OR
    -- Check for specific Office connection providers
    (x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.ACE")]') = 1
     AND x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1)
    OR
    (x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.Jet")]') = 1
     AND x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1);

#############################################################################################################################################



WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS)
SELECT 
    p.name AS PackageName,
    f.foldername AS FolderPath,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="CreationName"])[1]', 'nvarchar(255)') AS CreationName
FROM msdb.dbo.sysssispackages p
JOIN msdb.dbo.sysdtspackagefolders f 
    ON p.folderid = f.folderid
CROSS APPLY (SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))) x (PackageXML)
WHERE 
    -- Excel specific checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="CreationName"][contains(., "Excel")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".xls")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".xlsx")]') = 1
    OR
    -- Access specific checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="CreationName"][contains(., "Access")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".mdb")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".accdb")]') = 1
    OR
    -- Word specific checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".doc")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".docx")]') = 1
    OR
    -- PowerPoint specific checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".ppt")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".pptx")]') = 1
    OR
    -- Office providers with specific file types
    (x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.ACE")]') = 1
     AND (
         x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1 OR
         x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Access")]') = 1
     ))
    OR
    (x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.Jet")]') = 1
     AND (
         x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1 OR
         x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Access")]') = 1
     ))
    OR
    -- Office-specific provider checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Office.15")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Office.16")]') = 1;

################################################################################################################################################################


WITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS DTS)
SELECT 
    p.name AS PackageName,
    f.foldername AS FolderPath,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ObjectName"])[1]', 'nvarchar(255)') AS ConnectionManagerName,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="ConnectionString"])[1]', 'nvarchar(max)') AS ConnectionString,
    x.PackageXML.value('(//DTS:Property[@DTS:Name="CreationName"])[1]', 'nvarchar(255)') AS CreationName
FROM msdb.dbo.sysssispackages p
JOIN msdb.dbo.sysdtspackagefolders f 
    ON p.folderid = f.folderid
CROSS APPLY (SELECT CONVERT(xml, CONVERT(varbinary(max), p.packagedata))) x (PackageXML)
WHERE 
    -- Excel specific checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="CreationName"][contains(., "Excel")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".xls")]') = 1
    OR
    -- Access specific checks
    x.PackageXML.exist('//DTS:Property[@DTS:Name="CreationName"][contains(., "Access")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., ".mdb")]') = 1
    OR
    -- Office 2003 Web Components
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Office.11")]') = 1
    OR
    -- Office 2007 specific
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Office.12")]') = 1
    OR
    -- Microsoft.Jet specific for Office 2003
    (x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Microsoft.Jet.OLEDB.4")]') = 1
     AND (
         x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel")]') = 1 OR
         x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Access")]') = 1
     ))
    OR
    -- Provider checks for both versions
    x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Provider=Microsoft.Jet.OLEDB.4.0")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel 8.0")]') = 1
    OR x.PackageXML.exist('//DTS:Property[@DTS:Name="ConnectionString"][contains(., "Excel 12.0")]') = 1;







