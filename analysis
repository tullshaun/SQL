WITH RunningQueries AS (
    SELECT 
        r.session_id,
        r.blocking_session_id,
        r.status,
        r.wait_type,
        r.wait_time,
        r.cpu_time,
        r.logical_reads,
        r.reads, -- Physical reads (disk)
        r.writes,
        r.elapsed_time, -- Total duration
        r.plan_handle,
        r.sql_handle,
        r.request_id,
        s.memory_usage,
        s.program_name,
        s.login_name,
        s.host_name,
        q.text AS sql_text
    FROM sys.dm_exec_requests r
    JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
    CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS q
    WHERE r.session_id <> @@SPID -- Exclude current session
)
SELECT 
    rq.session_id,
    rq.blocking_session_id,
    rq.status,
    rq.wait_type,
    CASE 
        WHEN rq.wait_type IN ('PAGEIOLATCH_SH', 'PAGEIOLATCH_EX', 'WRITELOG') 
        THEN 'ðŸ”´ Possible Disk I/O Bottleneck'
        WHEN rq.wait_type LIKE 'LCK%' 
        THEN 'ðŸ”´ Query is Waiting for a Lock (Blocking Issue)'
        WHEN rq.wait_type = 'CXPACKET' 
        THEN 'ðŸŸ  Parallelism Issue (Consider Adjusting MAXDOP)'
        WHEN rq.wait_type = 'SOS_SCHEDULER_YIELD' 
        THEN 'ðŸŸ  High CPU Usage (Query Consuming CPU Cycles)'
        ELSE 'âœ… Normal Wait'
    END AS wait_analysis, -- Interpretation of Wait Type
    
    rq.wait_time / 1000 AS wait_time_sec,
    CASE 
        WHEN rq.wait_time / 1000 > 30 THEN 'ðŸ”´ Excessive Wait Time (>30 sec)'
        WHEN rq.wait_time / 1000 BETWEEN 10 AND 30 THEN 'ðŸŸ  Moderate Wait Time (10-30 sec)'
        ELSE 'âœ… Acceptable Wait Time'
    END AS wait_time_comment,

    rq.cpu_time / 1000 AS cpu_time_sec,
    CASE 
        WHEN rq.cpu_time / 1000 > 60 THEN 'ðŸ”´ High CPU Usage (>60 sec)'
        WHEN rq.cpu_time / 1000 BETWEEN 20 AND 60 THEN 'ðŸŸ  Moderate CPU Usage'
        ELSE 'âœ… Normal CPU Usage'
    END AS cpu_time_comment,

    rq.logical_reads,
    CASE 
        WHEN rq.logical_reads > 100000 THEN 'ðŸ”´ High Logical Reads (>100K) - Possible Index Issue'
        WHEN rq.logical_reads BETWEEN 50000 AND 100000 THEN 'ðŸŸ  Moderate Logical Reads'
        ELSE 'âœ… Normal Logical Reads'
    END AS logical_reads_comment,

    rq.reads AS disk_reads,
    CASE 
        WHEN rq.reads > 50000 THEN 'ðŸ”´ High Disk Reads (>50K) - Possible Missing Index'
        WHEN rq.reads BETWEEN 10000 AND 50000 THEN 'ðŸŸ  Moderate Disk Reads'
        ELSE 'âœ… Normal Disk Reads'
    END AS disk_reads_comment,

    rq.writes,
    CASE 
        WHEN rq.writes > 50000 THEN 'ðŸ”´ High Disk Writes (>50K) - Possible TempDB or Logging Issue'
        WHEN rq.writes BETWEEN 10000 AND 50000 THEN 'ðŸŸ  Moderate Disk Writes'
        ELSE 'âœ… Normal Disk Writes'
    END AS disk_writes_comment,

    rq.elapsed_time / 1000 AS elapsed_time_sec,
    CASE 
        WHEN rq.elapsed_time / 1000 > 300 THEN 'ðŸ”´ Query Running Over 5 Minutes - Needs Investigation'
        WHEN rq.elapsed_time / 1000 BETWEEN 60 AND 300 THEN 'ðŸŸ  Query Running Over 1 Minute'
        ELSE 'âœ… Normal Query Execution Time'
    END AS elapsed_time_comment,

    rq.memory_usage * 8 AS memory_usage_kb, -- Memory in KB
    CASE 
        WHEN rq.memory_usage * 8 > 100000 THEN 'ðŸ”´ High Memory Usage (>100MB) - Possible Memory Pressure'
        WHEN rq.memory_usage * 8 BETWEEN 50000 AND 100000 THEN 'ðŸŸ  Moderate Memory Usage'
        ELSE 'âœ… Normal Memory Usage'
    END AS memory_comment,

    rq.program_name,
    rq.login_name,
    rq.host_name,
    rq.sql_text -- The actual SQL text running
FROM RunningQueries rq
ORDER BY rq.elapsed_time DESC;




///basic anal
WITH RunningQueries AS (
    SELECT 
        r.session_id,
        r.blocking_session_id,
        r.status,
        r.wait_type,
        r.wait_time,
        r.cpu_time,
        r.logical_reads,
        r.reads, -- Physical reads (disk)
        r.writes,
        r.elapsed_time, -- Total duration
        r.plan_handle,
        r.sql_handle,
        r.request_id,
        s.memory_usage,
        s.program_name,
        s.login_name,
        s.host_name,
        q.text AS sql_text
    FROM sys.dm_exec_requests r
    JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
    CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS q
    WHERE r.session_id <> @@SPID -- Exclude current session
)
SELECT 
    rq.session_id,
    rq.blocking_session_id,
    rq.status,
    rq.wait_type,
    rq.wait_time / 1000 AS wait_time_sec,
    rq.cpu_time / 1000 AS cpu_time_sec,
    rq.logical_reads,
    rq.reads AS disk_reads,
    rq.writes,
    rq.elapsed_time / 1000 AS elapsed_time_sec,
    rq.memory_usage * 8 AS memory_usage_kb, -- Memory in KB
    rq.program_name,
    rq.login_name,
    rq.host_name,
    rq.sql_text
FROM RunningQueries rq
ORDER BY rq.elapsed_time DESC;
//

SELECT blocking_session_id, * FROM sys.dm_exec_requests WHERE blocking_session_id <> 0;

//memory

SELECT 
    total_physical_memory_kb / 1024 AS Total_RAM_MB,
    available_physical_memory_kb / 1024 AS Available_RAM_MB,
    system_memory_state_desc
FROM sys.dm_os_sys_memory;

//diskio

SELECT 
    file_id, 
    io_stall_read_ms, io_stall_write_ms, 
    num_of_reads, num_of_writes, 
    (io_stall_read_ms / NULLIF(num_of_reads, 0)) AS Avg_Read_Stall_MS,
    (io_stall_write_ms / NULLIF(num_of_writes, 0)) AS Avg_Write_Stall_MS
FROM sys.dm_io_virtual_file_stats(DB_ID(), NULL)
ORDER BY io_stall_read_ms DESC;


//missing index

SELECT 
    mig.index_handle, 
    mid.statement, 
    mid.equality_columns, 
    mid.inequality_columns, 
    mid.included_columns,
    mig.avg_user_impact 
FROM sys.dm_db_missing_index_details mid
JOIN sys.dm_db_missing_index_groups mig ON mid.index_handle = mig.index_handle
ORDER BY mig.avg_user_impact DESC;



//last index rebuild

SELECT 
    i.name AS index_name,
    o.name AS table_name,
    ps.last_user_update AS last_rebuild_time
FROM sys.dm_db_index_usage_stats ps
JOIN sys.indexes i ON ps.object_id = i.object_id AND ps.index_id = i.index_id
JOIN sys.objects o ON ps.object_id = o.object_id
WHERE ps.database_id = DB_ID()  -- Current database
AND i.type_desc IN ('CLUSTERED', 'NONCLUSTERED')
ORDER BY last_user_update DESC;

//last stats update

SELECT 
    t.name AS table_name,
    s.name AS stats_name,
    sp.last_updated AS last_stats_update,
    sp.rows AS total_rows,
    sp.modification_counter AS modifications_since_last_update
FROM sys.stats s
JOIN sys.tables t ON s.object_id = t.object_id
CROSS APPLY sys.dm_db_stats_properties(s.object_id, s.stats_id) AS sp
ORDER BY last_stats_update DESC;



// If Index Fragmentation >30%
Run this:

ALTER INDEX ALL ON TableName REBUILD;

If Stats Are Outdated
Run:

UPDATE STATISTICS TableName;







