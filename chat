# Create a dictionary with key-value pairs
knowledge_base = {
    "hello": "Hi there! How can I help you?",
    "price": "Our prices start from $10",
    "hours": "We are open 9am-5pm Monday to Friday",
    "location": "We are located at 123 Main Street",
    "shipping": "Shipping takes 3-5 business days",
    "payment": "We accept credit cards and PayPal",
    "return": "30-day return policy",
    "contact": "You can reach us at support@email.com",
    "help": "I'm here to assist you with any questions"
}

def find_matches(user_input):
    # Convert user input to lowercase and split into words
    user_words = user_input.lower().split()
    
    # Check each word against dictionary keys
    matches = {}
    for word in user_words:
        if word in knowledge_base:
            matches[word] = knowledge_base[word]
    
    return matches

# Main loop for user interaction
while True:
    # Get user input
    user_input = input("\nAsk a question (or type 'quit' to exit): ")
    
    # Check if user wants to quit
    if user_input.lower() == 'quit':
        print("Goodbye!")
        break
    
    # Find matches and display results
    matches = find_matches(user_input)
    
    if matches:
        print("\nHere are the relevant responses:")
        for key, value in matches.items():
            print(f"Matched '{key}': {value}")
    else:
        print("Sorry, I don't have any specific information about that.")



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demo Page</title>
    <style>
        /* Main page styles */
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }

        header {
            background-color: #2c3e50;
            color: white;
            padding: 2rem;
            text-align: center;
        }

        main {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .demo-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 2rem;
        }

        /* Chatbot styles */
        #chatbot-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #2c3e50;
            color: white;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 1000;
        }

        #chatWidget {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 350px;
            height: 500px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: none;
            overflow: hidden;
            z-index: 1000;
        }

        .chat-header {
            background: #2c3e50;
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .close-chat {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 20px;
        }

        #chatBody {
            height: 400px;
            overflow-y: auto;
            padding: 15px;
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 10px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .user-message {
            background: #e3f2fd;
            margin-left: auto;
        }

        .bot-message {
            background: #f5f5f5;
        }

        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #eee;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
        }

        #messageInput {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
            font-size: 14px;
        }

        .send-button {
            background: #2c3e50;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }

        #typingIndicator {
            display: none;
            padding: 10px;
            color: #666;
        }

        .message-link {
            color: #2c3e50;
            text-decoration: none;
        }

        .message-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <header>
        <h1>Welcome to Our Demo Page</h1>
        <p>Explore our interactive chatbot!</p>
    </header>

    <main>
        <div class="demo-card">
            <h3>About This Demo</h3>
            <p>This is a demonstration page showcasing our chatbot functionality. Click the chat icon in the bottom right corner to start a conversation. You can ask about:</p>
            <ul>
                <li>Our Services</li>
                <li>Pricing Information</li>
                <li>Support Options</li>
            </ul>
        </div>
    </main>

    <!-- Chatbot Toggle Button -->
    <button id="chatbot-toggle" onclick="toggleChat()">ðŸ’¬</button>

    <!-- Chat Widget -->
    <div id="chatWidget">
        <div class="chat-header">
            <span>Chat Support</span>
            <button class="close-chat" onclick="toggleChat()">Ã—</button>
        </div>
        <div id="chatBody">
            <div class="message bot-message">
                Hi! How can I assist you today? Feel free to ask about our services, pricing, or support options.
            </div>
            <div id="typingIndicator">
                <em>Bot is typing...</em>
            </div>
        </div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message..." onkeypress="handleKeyPress(event)">
            <button class="send-button" onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        // Chat responses configuration
        const responses = {
            help: {
                text: "I'm here to help! Our support team is available around the clock. Let me know if you have specific questions or visit our <a href='contact.html' class='message-link'>Support Center</a>."
            },
            support: {
                text: "Our support team is here for you! If you have any specific needs, reach out through our <a href='contact.html' class='message-link'>Support Center</a>.",
                followUp: "Is there anything specific I can assist you with today?"
            },
            pricing: {
                text: "We offer flexible pricing options tailored to your needs. Check out our <a href='pricing.html' class='message-link'>pricing page</a> for more details.",
                variations: ["price", "cost", "how much"],
                followUp: "Would you like help choosing the best plan for your needs?"
            },
            affirmative: {
                variations: ["yes", "yeah", "sure", "absolutely", "of course", "please do", "definitely"],
                text: "Thank you for your interest! For further details and a competitive, affordable price quote, please don't hesitate to contact our support team through the <a href='contact.html' class='message-link'>Support Center</a>."
            },
            negative: {
                variations: ["no", "not now", "no thanks", "maybe later", "not interested"],
                text: "Understood! If you have any questions or need assistance in the future, please feel free to reach out to our support team at any time through the <a href='contact.html' class='message-link'>Support Center</a>. We're here to help!"
            },
            explain: {
                variations: ["explain", "details", "more information", "clarify", "elaborate"],
                text: "For further explanation and in-depth details, or to discuss a custom solution tailored to your needs, please reach out to our support team via the <a href='contact.html' class='message-link'>Support Center</a>. We would be delighted to assist you!"
            },
            services: {
                text: "We offer AI Chatbots, QR Solutions, and AI Automations. Learn more about our <a href='solutions.html' class='message-link'>services</a>.",
                variations: ["service", "offerings", "solutions"],
                followUp: "Would you like more details on a specific service?"
            },
            chatbot: {
                text: "Our chatbots are designed to enhance customer engagement. Read more on our <a href='chatbots.html' class='message-link'>Chatbot Solutions page</a>."
            },
            qr: {
                text: "Our Dynamic QR Solutions help you connect physical and digital experiences. Discover more <a href='QRCodes.html' class='message-link'>here</a>."
            },
            hi: {
                text: "{greeting}! How can I assist you today? Would you like to know about <a href='solutions.html' class='message-link'>Services</a>, <a href='pricing.html' class='message-link'>Pricing</a>, or <a href='contact.html' class='message-link'>Support</a>?",
                variations: ["hello", "hiya", "hey", "hi", "hola"]
            },
            goodbye: {
                text: "Goodbye! Reach out anytime. Have a wonderful day!",
                variations: ["bye", "adios", "see you"]
            }
        };

        function getResponse(input) {
            const lowercaseInput = input.toLowerCase().trim();

            for (let key in responses) {
                const response = responses[key];

                if (lowercaseInput.includes(key) || (response.variations && response.variations.some(variation => lowercaseInput.includes(variation)))) {
                    let replyText = response.text;

                    if (key === "hi") {
                        const userGreeting = input.split(" ")[0];
                        replyText = replyText.replace("{greeting}", userGreeting);
                    }

                    return { text: replyText, followUp: response.followUp };
                }
            }

            return { text: "I'm here to help! Try asking about our <a href='solutions.html' class='message-link'>Services</a>, <a href='pricing.html' class='message-link'>Pricing</a>, or <a href='contact.html' class='message-link'>Support</a>." };
        }

        function addMessage(text, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
            messageDiv.textContent = text;
            
            const chatBody = document.getElementById('chatBody');
            chatBody.insertBefore(messageDiv, document.getElementById('typingIndicator'));
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        function addBotResponse(response) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message bot-message';
            messageDiv.innerHTML = response.text;

            const chatBody = document.getElementById('chatBody');
            chatBody.insertBefore(messageDiv, document.getElementById('typingIndicator'));
            chatBody.scrollTop = chatBody.scrollHeight;

            if (response.followUp) {
                setTimeout(() => {
                    const followUpDiv = document.createElement('div');
                    followUpDiv.className = 'message bot-message';
                    followUpDiv.innerHTML = response.followUp;
                    chatBody.insertBefore(followUpDiv, document.getElementById('typingIndicator'));
                    chatBody.scrollTop = chatBody.scrollHeight;
                }, 1000);
            }
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'flex';
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }

        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (message) {
                addMessage(message, true);
                input.value = '';
                showTypingIndicator();

                setTimeout(() => {
                    hideTypingIndicator();
                    const response = getResponse(message);
                    addBotResponse(response);
                }, 1000);
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function toggleChat() {
            const chatWidget = document.getElementById('chatWidget');
            const chatToggle = document.getElementById('chatbot-toggle');
            if (chatWidget.style.display === 'none') {
                chatWidget.style.display = 'block';
                chatToggle.style.display = 'none';
            } else {
                chatWidget.style.display = 'none';
                chatToggle.style.display = 'block';
            }
        }

        // Initialize chat state
        document.addEventListener('DOMContentLoaded', function() {
            const chatWidget = document.getElementById('chatWidget');
            const chatToggle = document.getElementById('chatbot-toggle');
            chatWidget.style.display = 'none';
            chatToggle.style.display = 'block';
        });
    </script>
</body>
</html>


















